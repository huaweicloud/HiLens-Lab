# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_hdacli_internal')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_hdacli_internal')
    _hdacli_internal = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hdacli_internal', [dirname(__file__)])
        except ImportError:
            import _hdacli_internal
            return _hdacli_internal
        try:
            _mod = imp.load_module('_hdacli_internal', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _hdacli_internal = swig_import_helper()
    del swig_import_helper
else:
    import _hdacli_internal
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hdacli_internal.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _hdacli_internal.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _hdacli_internal.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _hdacli_internal.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _hdacli_internal.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _hdacli_internal.SwigPyIterator_equal(self, x)

    def copy(self):
        return _hdacli_internal.SwigPyIterator_copy(self)

    def next(self):
        return _hdacli_internal.SwigPyIterator_next(self)

    def __next__(self):
        return _hdacli_internal.SwigPyIterator___next__(self)

    def previous(self):
        return _hdacli_internal.SwigPyIterator_previous(self)

    def advance(self, n):
        return _hdacli_internal.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _hdacli_internal.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _hdacli_internal.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _hdacli_internal.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _hdacli_internal.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _hdacli_internal.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _hdacli_internal.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _hdacli_internal.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _hdacli_internal.SHARED_PTR_DISOWN
OK = _hdacli_internal.OK
UNKNOWN_ERROR = _hdacli_internal.UNKNOWN_ERROR
CONFIG_ERROR = _hdacli_internal.CONFIG_ERROR
ADDRESS_INVALID = _hdacli_internal.ADDRESS_INVALID
CONNECT_FAIL = _hdacli_internal.CONNECT_FAIL
SKILL_ID_INVALID = _hdacli_internal.SKILL_ID_INVALID
NO_CONNECT = _hdacli_internal.NO_CONNECT
INTERNAL_ERROR = _hdacli_internal.INTERNAL_ERROR
SEND_FAIL = _hdacli_internal.SEND_FAIL
CONNECT_TIMEOUT = _hdacli_internal.CONNECT_TIMEOUT
MSG_TOO_LONG = _hdacli_internal.MSG_TOO_LONG
MSG_INVALID = _hdacli_internal.MSG_INVALID
MSG_QUEUE_FULL = _hdacli_internal.MSG_QUEUE_FULL
GET_MODEL_FAIL = _hdacli_internal.GET_MODEL_FAIL
MODEL_DECRYPT_FAIL = _hdacli_internal.MODEL_DECRYPT_FAIL

def Init(verify, host):
    return _hdacli_internal.Init(verify, host)
Init = _hdacli_internal.Init

def Terminate():
    return _hdacli_internal.Terminate()
Terminate = _hdacli_internal.Terminate

def SendMessage(msg, length):
    return _hdacli_internal.SendMessage(msg, length)
SendMessage = _hdacli_internal.SendMessage

def SendHeart(msg, length):
    return _hdacli_internal.SendHeart(msg, length)
SendHeart = _hdacli_internal.SendHeart

def ModelDecrypt(encryptedModelPath, decryptedModelPath):
    return _hdacli_internal.ModelDecrypt(encryptedModelPath, decryptedModelPath)
ModelDecrypt = _hdacli_internal.ModelDecrypt

def GetModelKey():
    return _hdacli_internal.GetModelKey()
GetModelKey = _hdacli_internal.GetModelKey

def RequestDevicesList():
    return _hdacli_internal.RequestDevicesList()
RequestDevicesList = _hdacli_internal.RequestDevicesList
MSG_FORWARD = _hdacli_internal.MSG_FORWARD
SKILL_HEART = _hdacli_internal.SKILL_HEART
DEVICE_LIST = _hdacli_internal.DEVICE_LIST

def ReadMessage(msgType):
    return _hdacli_internal.ReadMessage(msgType)
ReadMessage = _hdacli_internal.ReadMessage
TRACE = _hdacli_internal.TRACE
DEBUG = _hdacli_internal.DEBUG
INFO = _hdacli_internal.INFO
WARNING = _hdacli_internal.WARNING
ERROR = _hdacli_internal.ERROR
FATAL = _hdacli_internal.FATAL

def Trace(fmt):
    return _hdacli_internal.Trace(fmt)
Trace = _hdacli_internal.Trace

def Debug(fmt):
    return _hdacli_internal.Debug(fmt)
Debug = _hdacli_internal.Debug

def Info(fmt):
    return _hdacli_internal.Info(fmt)
Info = _hdacli_internal.Info

def Warning(fmt):
    return _hdacli_internal.Warning(fmt)
Warning = _hdacli_internal.Warning

def Error(fmt):
    return _hdacli_internal.Error(fmt)
Error = _hdacli_internal.Error

def Fatal(fmt):
    return _hdacli_internal.Fatal(fmt)
Fatal = _hdacli_internal.Fatal

def SetLogLevel(level):
    return _hdacli_internal.SetLogLevel(level)
SetLogLevel = _hdacli_internal.SetLogLevel

def InitHdacliLogger():
    return _hdacli_internal.InitHdacliLogger()
InitHdacliLogger = _hdacli_internal.InitHdacliLogger
# This file is compatible with both classic and new-style classes.


