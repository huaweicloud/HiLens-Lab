# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_hilens_internal')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_hilens_internal')
    _hilens_internal = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hilens_internal', [dirname(__file__)])
        except ImportError:
            import _hilens_internal
            return _hilens_internal
        try:
            _mod = imp.load_module('_hilens_internal', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _hilens_internal = swig_import_helper()
    del swig_import_helper
else:
    import _hilens_internal
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hilens_internal.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _hilens_internal.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _hilens_internal.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _hilens_internal.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _hilens_internal.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _hilens_internal.SwigPyIterator_equal(self, x)

    def copy(self):
        return _hilens_internal.SwigPyIterator_copy(self)

    def next(self):
        return _hilens_internal.SwigPyIterator_next(self)

    def __next__(self):
        return _hilens_internal.SwigPyIterator___next__(self)

    def previous(self):
        return _hilens_internal.SwigPyIterator_previous(self)

    def advance(self, n):
        return _hilens_internal.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _hilens_internal.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _hilens_internal.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _hilens_internal.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _hilens_internal.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _hilens_internal.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _hilens_internal.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _hilens_internal.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _hilens_internal.SHARED_PTR_DISOWN
class floatArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _hilens_internal.new_floatArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hilens_internal.delete_floatArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _hilens_internal.floatArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _hilens_internal.floatArray___setitem__(self, index, value)

    def cast(self):
        return _hilens_internal.floatArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_hilens_internal.floatArray_frompointer)
    else:
        frompointer = _hilens_internal.floatArray_frompointer
floatArray_swigregister = _hilens_internal.floatArray_swigregister
floatArray_swigregister(floatArray)

def floatArray_frompointer(t):
    return _hilens_internal.floatArray_frompointer(t)
floatArray_frompointer = _hilens_internal.floatArray_frompointer

OK = _hilens_internal.OK
UNKNOWN_ERROR = _hilens_internal.UNKNOWN_ERROR
INIT_CURL_ERROR = _hilens_internal.INIT_CURL_ERROR
CREATE_DIR_FAILED = _hilens_internal.CREATE_DIR_FAILED
OPENFILE_FAILED = _hilens_internal.OPENFILE_FAILED
RENAME_FAILED = _hilens_internal.RENAME_FAILED
ACCESS_FILE_FAILED = _hilens_internal.ACCESS_FILE_FAILED
INVALID_BUF = _hilens_internal.INVALID_BUF
COULDNT_RESOLVE_HOST = _hilens_internal.COULDNT_RESOLVE_HOST
WRITE_ERROR = _hilens_internal.WRITE_ERROR
TIMEOUT = _hilens_internal.TIMEOUT
AUTH_FAILED = _hilens_internal.AUTH_FAILED
NOT_FOUND = _hilens_internal.NOT_FOUND
SERVER_ERROR = _hilens_internal.SERVER_ERROR
OBJECT_CONFLICT = _hilens_internal.OBJECT_CONFLICT
APPEND_FAILED = _hilens_internal.APPEND_FAILED
HIAI_SEND_DATA_FAILED = _hilens_internal.HIAI_SEND_DATA_FAILED
HIAI_INFER_ERROR = _hilens_internal.HIAI_INFER_ERROR
INVALID_SRC_SIZE = _hilens_internal.INVALID_SRC_SIZE
INVALID_DST_SIZE = _hilens_internal.INVALID_DST_SIZE
MPP_PROCESS_FAILED = _hilens_internal.MPP_PROCESS_FAILED
WEBSOCKET_ERROR = _hilens_internal.WEBSOCKET_ERROR
CONFIG_FILE_ERROR = _hilens_internal.CONFIG_FILE_ERROR
INVALID_PARAM = _hilens_internal.INVALID_PARAM
INTERNAL_ERROR = _hilens_internal.INTERNAL_ERROR
INIT_LOG_ERROR = _hilens_internal.INIT_LOG_ERROR
INIT_MIC_ERROR = _hilens_internal.INIT_MIC_ERROR
INIT_AENC_ERROR = _hilens_internal.INIT_AENC_ERROR
INIT_ADEC_ERROR = _hilens_internal.INIT_ADEC_ERROR
INIT_AO_ERROR = _hilens_internal.INIT_AO_ERROR
AUDIO_CHECK_ERROR = _hilens_internal.AUDIO_CHECK_ERROR
AUDIO_SYSTEM_INIT_FAILED = _hilens_internal.AUDIO_SYSTEM_INIT_FAILED
ADDRESS_INVALID = _hilens_internal.ADDRESS_INVALID
CONNECT_FAIL = _hilens_internal.CONNECT_FAIL
SKILL_ID_INVALID = _hilens_internal.SKILL_ID_INVALID
NO_CONNECT = _hilens_internal.NO_CONNECT
SEND_FAIL = _hilens_internal.SEND_FAIL
CONNECT_TIMEOUT = _hilens_internal.CONNECT_TIMEOUT
MSG_TOO_LONG = _hilens_internal.MSG_TOO_LONG
MSG_INVALID = _hilens_internal.MSG_INVALID
MSG_QUEUE_FULL = _hilens_internal.MSG_QUEUE_FULL
EI_GET = _hilens_internal.EI_GET
EI_POST = _hilens_internal.EI_POST
EI_PUT = _hilens_internal.EI_PUT
EI_DELETE = _hilens_internal.EI_DELETE
class EIResponse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EIResponse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EIResponse, name)
    __repr__ = _swig_repr
    __swig_setmethods__["requestState"] = _hilens_internal.EIResponse_requestState_set
    __swig_getmethods__["requestState"] = _hilens_internal.EIResponse_requestState_get
    if _newclass:
        requestState = _swig_property(_hilens_internal.EIResponse_requestState_get, _hilens_internal.EIResponse_requestState_set)
    __swig_setmethods__["responseBody"] = _hilens_internal.EIResponse_responseBody_set
    __swig_getmethods__["responseBody"] = _hilens_internal.EIResponse_responseBody_get
    if _newclass:
        responseBody = _swig_property(_hilens_internal.EIResponse_responseBody_get, _hilens_internal.EIResponse_responseBody_set)

    def __init__(self):
        this = _hilens_internal.new_EIResponse()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hilens_internal.delete_EIResponse
    __del__ = lambda self: None
EIResponse_swigregister = _hilens_internal.EIResponse_swigregister
EIResponse_swigregister(EIResponse)

class EIServices(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EIServices, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EIServices, name)
    __repr__ = _swig_repr
    if _newclass:
        Request = staticmethod(_hilens_internal.EIServices_Request)
    else:
        Request = _hilens_internal.EIServices_Request
    if _newclass:
        HumanDetect = staticmethod(_hilens_internal.EIServices_HumanDetect)
    else:
        HumanDetect = _hilens_internal.EIServices_HumanDetect
    if _newclass:
        FaceAttribute = staticmethod(_hilens_internal.EIServices_FaceAttribute)
    else:
        FaceAttribute = _hilens_internal.EIServices_FaceAttribute
    if _newclass:
        LicensePlate = staticmethod(_hilens_internal.EIServices_LicensePlate)
    else:
        LicensePlate = _hilens_internal.EIServices_LicensePlate
    if _newclass:
        DogShitDetect = staticmethod(_hilens_internal.EIServices_DogShitDetect)
    else:
        DogShitDetect = _hilens_internal.EIServices_DogShitDetect
    if _newclass:
        SearchFace = staticmethod(_hilens_internal.EIServices_SearchFace)
    else:
        SearchFace = _hilens_internal.EIServices_SearchFace
    if _newclass:
        AddFace = staticmethod(_hilens_internal.EIServices_AddFace)
    else:
        AddFace = _hilens_internal.EIServices_AddFace
    if _newclass:
        FaceDetect = staticmethod(_hilens_internal.EIServices_FaceDetect)
    else:
        FaceDetect = _hilens_internal.EIServices_FaceDetect
    if _newclass:
        FaceCompare = staticmethod(_hilens_internal.EIServices_FaceCompare)
    else:
        FaceCompare = _hilens_internal.EIServices_FaceCompare
    if _newclass:
        MARealTimeService = staticmethod(_hilens_internal.EIServices_MARealTimeService)
    else:
        MARealTimeService = _hilens_internal.EIServices_MARealTimeService

    def __init__(self):
        this = _hilens_internal.new_EIServices()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hilens_internal.delete_EIServices
    __del__ = lambda self: None
EIServices_swigregister = _hilens_internal.EIServices_swigregister
EIServices_swigregister(EIServices)

def EIServices_Request(method, host, uri, queryParams, payload, headers):
    return _hilens_internal.EIServices_Request(method, host, uri, queryParams, payload, headers)
EIServices_Request = _hilens_internal.EIServices_Request

def EIServices_HumanDetect(imageBase64):
    return _hilens_internal.EIServices_HumanDetect(imageBase64)
EIServices_HumanDetect = _hilens_internal.EIServices_HumanDetect

def EIServices_FaceAttribute(imageBase64):
    return _hilens_internal.EIServices_FaceAttribute(imageBase64)
EIServices_FaceAttribute = _hilens_internal.EIServices_FaceAttribute

def EIServices_LicensePlate(imageBase64):
    return _hilens_internal.EIServices_LicensePlate(imageBase64)
EIServices_LicensePlate = _hilens_internal.EIServices_LicensePlate

def EIServices_DogShitDetect(imageBase64):
    return _hilens_internal.EIServices_DogShitDetect(imageBase64)
EIServices_DogShitDetect = _hilens_internal.EIServices_DogShitDetect

def EIServices_SearchFace(faceSetName, imageBase64, topN, threshold, filter):
    return _hilens_internal.EIServices_SearchFace(faceSetName, imageBase64, topN, threshold, filter)
EIServices_SearchFace = _hilens_internal.EIServices_SearchFace

def EIServices_AddFace(faceSetName, imageBase64, externalImageId):
    return _hilens_internal.EIServices_AddFace(faceSetName, imageBase64, externalImageId)
EIServices_AddFace = _hilens_internal.EIServices_AddFace

def EIServices_FaceDetect(imageBase64, attributes):
    return _hilens_internal.EIServices_FaceDetect(imageBase64, attributes)
EIServices_FaceDetect = _hilens_internal.EIServices_FaceDetect

def EIServices_FaceCompare(base64Image1, base64Image2):
    return _hilens_internal.EIServices_FaceCompare(base64Image1, base64Image2)
EIServices_FaceCompare = _hilens_internal.EIServices_FaceCompare

def EIServices_MARealTimeService(host, url, fileKey, filePath):
    return _hilens_internal.EIServices_MARealTimeService(host, url, fileKey, filePath)
EIServices_MARealTimeService = _hilens_internal.EIServices_MARealTimeService


def Init(verify):
    return _hilens_internal.Init(verify)
Init = _hilens_internal.Init

def Terminate():
    return _hilens_internal.Terminate()
Terminate = _hilens_internal.Terminate
TRACE = _hilens_internal.TRACE
DEBUG = _hilens_internal.DEBUG
INFO = _hilens_internal.INFO
WARNING = _hilens_internal.WARNING
ERROR = _hilens_internal.ERROR
FATAL = _hilens_internal.FATAL

def Trace(fmt):
    return _hilens_internal.Trace(fmt)
Trace = _hilens_internal.Trace

def Debug(fmt):
    return _hilens_internal.Debug(fmt)
Debug = _hilens_internal.Debug

def Info(fmt):
    return _hilens_internal.Info(fmt)
Info = _hilens_internal.Info

def Warning(fmt):
    return _hilens_internal.Warning(fmt)
Warning = _hilens_internal.Warning

def Error(fmt):
    return _hilens_internal.Error(fmt)
Error = _hilens_internal.Error

def Fatal(fmt):
    return _hilens_internal.Fatal(fmt)
Fatal = _hilens_internal.Fatal

def SetLogLevel(level):
    return _hilens_internal.SetLogLevel(level)
SetLogLevel = _hilens_internal.SetLogLevel
BGR2YUV_NV12 = _hilens_internal.BGR2YUV_NV12
RGB2YUV_NV12 = _hilens_internal.RGB2YUV_NV12
BGR2YUV_NV21 = _hilens_internal.BGR2YUV_NV21
RGB2YUV_NV21 = _hilens_internal.RGB2YUV_NV21

def CvtColor(src, dst, code):
    return _hilens_internal.CvtColor(src, dst, code)
CvtColor = _hilens_internal.CvtColor
class Preprocessor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Preprocessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Preprocessor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_hilens_internal.Preprocessor_Create)
    else:
        Create = _hilens_internal.Preprocessor_Create

    def Resize(self, src, dst, w, h, type=0):
        return _hilens_internal.Preprocessor_Resize(self, src, dst, w, h, type)

    def Crop(self, src, dst, x, y, w, h, type=0):
        return _hilens_internal.Preprocessor_Crop(self, src, dst, x, y, w, h, type)
    __swig_destroy__ = _hilens_internal.delete_Preprocessor
    __del__ = lambda self: None
Preprocessor_swigregister = _hilens_internal.Preprocessor_swigregister
Preprocessor_swigregister(Preprocessor)

def Preprocessor_Create():
    return _hilens_internal.Preprocessor_Create()
Preprocessor_Create = _hilens_internal.Preprocessor_Create

class InferData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InferData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InferData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _hilens_internal.InferData_size_set
    __swig_getmethods__["size"] = _hilens_internal.InferData_size_get
    if _newclass:
        size = _swig_property(_hilens_internal.InferData_size_get, _hilens_internal.InferData_size_set)
    __swig_setmethods__["data"] = _hilens_internal.InferData_data_set
    __swig_getmethods__["data"] = _hilens_internal.InferData_data_get
    if _newclass:
        data = _swig_property(_hilens_internal.InferData_data_get, _hilens_internal.InferData_data_set)

    def __init__(self, *args):
        this = _hilens_internal.new_InferData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hilens_internal.delete_InferData
    __del__ = lambda self: None
InferData_swigregister = _hilens_internal.InferData_swigregister
InferData_swigregister(InferData)

class Model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Model, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_hilens_internal.Model_Create)
    else:
        Create = _hilens_internal.Model_Create

    def Infer(self, inputs, outputs):
        return _hilens_internal.Model_Infer(self, inputs, outputs)
    __swig_destroy__ = _hilens_internal.delete_Model
    __del__ = lambda self: None
Model_swigregister = _hilens_internal.Model_swigregister
Model_swigregister(Model)

def Model_Create(filename):
    return _hilens_internal.Model_Create(filename)
Model_Create = _hilens_internal.Model_Create


def UploadFile(key, filepath, mode):
    return _hilens_internal.UploadFile(key, filepath, mode)
UploadFile = _hilens_internal.UploadFile

def UploadFileAsync(key, filepath, mode, callback=None):
    return _hilens_internal.UploadFileAsync(key, filepath, mode, callback)
UploadFileAsync = _hilens_internal.UploadFileAsync

def UploadBuffer(key, buffer, mode):
    return _hilens_internal.UploadBuffer(key, buffer, mode)
UploadBuffer = _hilens_internal.UploadBuffer

def UploadBufferAsync(key, buffer, bufferSize, mode, callback=None):
    return _hilens_internal.UploadBufferAsync(key, buffer, bufferSize, mode, callback)
UploadBufferAsync = _hilens_internal.UploadBufferAsync

def SendMessage(subject, message):
    return _hilens_internal.SendMessage(subject, message)
SendMessage = _hilens_internal.SendMessage

def SendMessageAsync(subject, message, callback=None):
    return _hilens_internal.SendMessageAsync(subject, message, callback)
SendMessageAsync = _hilens_internal.SendMessageAsync

def SendWSSMessage(msg, length):
    return _hilens_internal.SendWSSMessage(msg, length)
SendWSSMessage = _hilens_internal.SendWSSMessage

def OnWSSMessage(callback):
    return _hilens_internal.OnWSSMessage(callback)
OnWSSMessage = _hilens_internal.OnWSSMessage
class Display(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Display, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Display, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HDMI = _hilens_internal.Display_HDMI
    RTMP = _hilens_internal.Display_RTMP
    H264_FILE = _hilens_internal.Display_H264_FILE
    if _newclass:
        Create = staticmethod(_hilens_internal.Display_Create)
    else:
        Create = _hilens_internal.Display_Create

    def Show(self, frame):
        return _hilens_internal.Display_Show(self, frame)
    __swig_destroy__ = _hilens_internal.delete_Display
    __del__ = lambda self: None
Display_swigregister = _hilens_internal.Display_swigregister
Display_swigregister(Display)

def Display_Create(type, path=None):
    return _hilens_internal.Display_Create(type, path)
Display_Create = _hilens_internal.Display_Create


def POST(url, body, httpcode, response=None, headers=None):
    return _hilens_internal.POST(url, body, httpcode, response, headers)
POST = _hilens_internal.POST

def GetWorkspacePath():
    return _hilens_internal.GetWorkspacePath()
GetWorkspacePath = _hilens_internal.GetWorkspacePath

def GetModelDirPath():
    return _hilens_internal.GetModelDirPath()
GetModelDirPath = _hilens_internal.GetModelDirPath

def GetSkillConfig():
    return _hilens_internal.GetSkillConfig()
GetSkillConfig = _hilens_internal.GetSkillConfig

def GetHardSampleConfig():
    return _hilens_internal.GetHardSampleConfig()
GetHardSampleConfig = _hilens_internal.GetHardSampleConfig

def SetHardSampleConfig(confStr):
    return _hilens_internal.SetHardSampleConfig(confStr)
SetHardSampleConfig = _hilens_internal.SetHardSampleConfig

def MD5ofFile(filepath):
    return _hilens_internal.MD5ofFile(filepath)
MD5ofFile = _hilens_internal.MD5ofFile

def DownloadFileFromOBS(url, downloadTo):
    return _hilens_internal.DownloadFileFromOBS(url, downloadTo)
DownloadFileFromOBS = _hilens_internal.DownloadFileFromOBS
class VideoCapture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoCapture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoCapture, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_hilens_internal.VideoCapture_Create)
    else:
        Create = _hilens_internal.VideoCapture_Create
    __swig_destroy__ = _hilens_internal.delete_VideoCapture
    __del__ = lambda self: None

    def Read(self):
        return _hilens_internal.VideoCapture_Read(self)

    def Width(self):
        return _hilens_internal.VideoCapture_Width(self)

    def Height(self):
        return _hilens_internal.VideoCapture_Height(self)
VideoCapture_swigregister = _hilens_internal.VideoCapture_swigregister
VideoCapture_swigregister(VideoCapture)

def VideoCapture_Create(*args):
    return _hilens_internal.VideoCapture_Create(*args)
VideoCapture_Create = _hilens_internal.VideoCapture_Create

MAX_FRAME_NUM_ONCE = _hilens_internal.MAX_FRAME_NUM_ONCE
class AudioFrame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioFrame, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _hilens_internal.AudioFrame_data_set
    __swig_getmethods__["data"] = _hilens_internal.AudioFrame_data_get
    if _newclass:
        data = _swig_property(_hilens_internal.AudioFrame_data_get, _hilens_internal.AudioFrame_data_set)
    __swig_setmethods__["size"] = _hilens_internal.AudioFrame_size_set
    __swig_getmethods__["size"] = _hilens_internal.AudioFrame_size_get
    if _newclass:
        size = _swig_property(_hilens_internal.AudioFrame_size_get, _hilens_internal.AudioFrame_size_set)

    def __init__(self):
        this = _hilens_internal.new_AudioFrame()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hilens_internal.delete_AudioFrame
    __del__ = lambda self: None
AudioFrame_swigregister = _hilens_internal.AudioFrame_swigregister
AudioFrame_swigregister(AudioFrame)

class AudioProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioProperties, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enSamplerate"] = _hilens_internal.AudioProperties_enSamplerate_set
    __swig_getmethods__["enSamplerate"] = _hilens_internal.AudioProperties_enSamplerate_get
    if _newclass:
        enSamplerate = _swig_property(_hilens_internal.AudioProperties_enSamplerate_get, _hilens_internal.AudioProperties_enSamplerate_set)
    __swig_setmethods__["enBitwidth"] = _hilens_internal.AudioProperties_enBitwidth_set
    __swig_getmethods__["enBitwidth"] = _hilens_internal.AudioProperties_enBitwidth_get
    if _newclass:
        enBitwidth = _swig_property(_hilens_internal.AudioProperties_enBitwidth_get, _hilens_internal.AudioProperties_enBitwidth_set)
    __swig_setmethods__["u32PtNumPerFrm"] = _hilens_internal.AudioProperties_u32PtNumPerFrm_set
    __swig_getmethods__["u32PtNumPerFrm"] = _hilens_internal.AudioProperties_u32PtNumPerFrm_get
    if _newclass:
        u32PtNumPerFrm = _swig_property(_hilens_internal.AudioProperties_u32PtNumPerFrm_get, _hilens_internal.AudioProperties_u32PtNumPerFrm_set)
    __swig_setmethods__["soundMode"] = _hilens_internal.AudioProperties_soundMode_set
    __swig_getmethods__["soundMode"] = _hilens_internal.AudioProperties_soundMode_get
    if _newclass:
        soundMode = _swig_property(_hilens_internal.AudioProperties_soundMode_get, _hilens_internal.AudioProperties_soundMode_set)

    def __init__(self):
        this = _hilens_internal.new_AudioProperties()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hilens_internal.delete_AudioProperties
    __del__ = lambda self: None
AudioProperties_swigregister = _hilens_internal.AudioProperties_swigregister
AudioProperties_swigregister(AudioProperties)

AUDIO_FROM_MIC = _hilens_internal.AUDIO_FROM_MIC
AUDIO_FROM_FILE = _hilens_internal.AUDIO_FROM_FILE
AUDIO_FROM_BUTT = _hilens_internal.AUDIO_FROM_BUTT
class AudioCapture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioCapture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioCapture, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_hilens_internal.AudioCapture_Create)
    else:
        Create = _hilens_internal.AudioCapture_Create
    __swig_destroy__ = _hilens_internal.delete_AudioCapture
    __del__ = lambda self: None

    def Read(self, frames, arg3=1):
        return _hilens_internal.AudioCapture_Read(self, frames, arg3)

    def SetProperty(self, properties):
        return _hilens_internal.AudioCapture_SetProperty(self, properties)

    def GetProperty(self, properties):
        return _hilens_internal.AudioCapture_GetProperty(self, properties)

    def SetVolume(self, volume):
        return _hilens_internal.AudioCapture_SetVolume(self, volume)

    def GetVolume(self):
        return _hilens_internal.AudioCapture_GetVolume(self)
AudioCapture_swigregister = _hilens_internal.AudioCapture_swigregister
AudioCapture_swigregister(AudioCapture)

def AudioCapture_Create(*args):
    return _hilens_internal.AudioCapture_Create(*args)
AudioCapture_Create = _hilens_internal.AudioCapture_Create


def PlayAacFile(filePath, vol):
    return _hilens_internal.PlayAacFile(filePath, vol)
PlayAacFile = _hilens_internal.PlayAacFile

def PlayHandleSigno(signo):
    return _hilens_internal.PlayHandleSigno(signo)
PlayHandleSigno = _hilens_internal.PlayHandleSigno
class AudioOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioOutput, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        Create = staticmethod(_hilens_internal.AudioOutput_Create)
    else:
        Create = _hilens_internal.AudioOutput_Create
    __swig_destroy__ = _hilens_internal.delete_AudioOutput
    __del__ = lambda self: None

    def Play(self):
        return _hilens_internal.AudioOutput_Play(self)

    def SetProperty(self, properties):
        return _hilens_internal.AudioOutput_SetProperty(self, properties)

    def GetProperty(self, properties):
        return _hilens_internal.AudioOutput_GetProperty(self, properties)

    def SetVolume(self, volume):
        return _hilens_internal.AudioOutput_SetVolume(self, volume)

    def GetVolume(self):
        return _hilens_internal.AudioOutput_GetVolume(self)
AudioOutput_swigregister = _hilens_internal.AudioOutput_swigregister
AudioOutput_swigregister(AudioOutput)

def AudioOutput_Create(*args):
    return _hilens_internal.AudioOutput_Create(*args)
AudioOutput_Create = _hilens_internal.AudioOutput_Create

class VideoCaptureWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VideoCaptureWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VideoCaptureWrapper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hilens_internal.new_VideoCaptureWrapper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hilens_internal.delete_VideoCaptureWrapper
    __del__ = lambda self: None

    def Init(self, *args):
        return _hilens_internal.VideoCaptureWrapper_Init(self, *args)

    def ReadArray(self, data):
        return _hilens_internal.VideoCaptureWrapper_ReadArray(self, data)

    def ReadError(self):
        return _hilens_internal.VideoCaptureWrapper_ReadError(self)

    def Width(self):
        return _hilens_internal.VideoCaptureWrapper_Width(self)

    def Height(self):
        return _hilens_internal.VideoCaptureWrapper_Height(self)
VideoCaptureWrapper_swigregister = _hilens_internal.VideoCaptureWrapper_swigregister
VideoCaptureWrapper_swigregister(VideoCaptureWrapper)


def CvtColorWrapper(srcData, dstData, rows, cols, code):
    return _hilens_internal.CvtColorWrapper(srcData, dstData, rows, cols, code)
CvtColorWrapper = _hilens_internal.CvtColorWrapper
class PreprocessorWrapper(Preprocessor):
    __swig_setmethods__ = {}
    for _s in [Preprocessor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PreprocessorWrapper, name, value)
    __swig_getmethods__ = {}
    for _s in [Preprocessor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PreprocessorWrapper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hilens_internal.new_PreprocessorWrapper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hilens_internal.delete_PreprocessorWrapper
    __del__ = lambda self: None

    def ResizeArray(self, srcData, dstData, cols, rows, w, h, type=0):
        return _hilens_internal.PreprocessorWrapper_ResizeArray(self, srcData, dstData, cols, rows, w, h, type)

    def CropArray(self, srcData, dstData, cols, rows, x, y, w, h, type=0):
        return _hilens_internal.PreprocessorWrapper_CropArray(self, srcData, dstData, cols, rows, x, y, w, h, type)

    def Init(self):
        return _hilens_internal.PreprocessorWrapper_Init(self)
PreprocessorWrapper_swigregister = _hilens_internal.PreprocessorWrapper_swigregister
PreprocessorWrapper_swigregister(PreprocessorWrapper)

class InferDataWrapper(InferData):
    __swig_setmethods__ = {}
    for _s in [InferData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InferDataWrapper, name, value)
    __swig_getmethods__ = {}
    for _s in [InferData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InferDataWrapper, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _hilens_internal.new_InferDataWrapper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hilens_internal.delete_InferDataWrapper
    __del__ = lambda self: None

    def ToArrayUint8(self, data):
        return _hilens_internal.InferDataWrapper_ToArrayUint8(self, data)

    def ToArrayFloat(self, data):
        return _hilens_internal.InferDataWrapper_ToArrayFloat(self, data)
InferDataWrapper_swigregister = _hilens_internal.InferDataWrapper_swigregister
InferDataWrapper_swigregister(InferDataWrapper)

class ModelWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelWrapper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hilens_internal.new_ModelWrapper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hilens_internal.delete_ModelWrapper
    __del__ = lambda self: None

    def Init(self, filename):
        return _hilens_internal.ModelWrapper_Init(self, filename)

    def InferWrapper(self, inputs, outputs):
        return _hilens_internal.ModelWrapper_InferWrapper(self, inputs, outputs)
ModelWrapper_swigregister = _hilens_internal.ModelWrapper_swigregister
ModelWrapper_swigregister(ModelWrapper)

class DisplayWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplayWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DisplayWrapper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hilens_internal.new_DisplayWrapper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hilens_internal.delete_DisplayWrapper
    __del__ = lambda self: None

    def Init(self, type, path=None):
        return _hilens_internal.DisplayWrapper_Init(self, type, path)

    def ShowArray(self, srcData, cols, rows):
        return _hilens_internal.DisplayWrapper_ShowArray(self, srcData, cols, rows)
DisplayWrapper_swigregister = _hilens_internal.DisplayWrapper_swigregister
DisplayWrapper_swigregister(DisplayWrapper)


def GetSkillConfigText():
    return _hilens_internal.GetSkillConfigText()
GetSkillConfigText = _hilens_internal.GetSkillConfigText

def GetHardSampleConfigText():
    return _hilens_internal.GetHardSampleConfigText()
GetHardSampleConfigText = _hilens_internal.GetHardSampleConfigText
class AudioCaptureWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioCaptureWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioCaptureWrapper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hilens_internal.new_AudioCaptureWrapper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hilens_internal.delete_AudioCaptureWrapper
    __del__ = lambda self: None

    def Init(self, *args):
        return _hilens_internal.AudioCaptureWrapper_Init(self, *args)

    def SetVolume(self, vol):
        return _hilens_internal.AudioCaptureWrapper_SetVolume(self, vol)

    def GetVolume(self):
        return _hilens_internal.AudioCaptureWrapper_GetVolume(self)

    def ReadArray(self, numFrames):
        return _hilens_internal.AudioCaptureWrapper_ReadArray(self, numFrames)

    def ToNumpyArray(self, data):
        return _hilens_internal.AudioCaptureWrapper_ToNumpyArray(self, data)
    __swig_setmethods__["totalSize"] = _hilens_internal.AudioCaptureWrapper_totalSize_set
    __swig_getmethods__["totalSize"] = _hilens_internal.AudioCaptureWrapper_totalSize_get
    if _newclass:
        totalSize = _swig_property(_hilens_internal.AudioCaptureWrapper_totalSize_get, _hilens_internal.AudioCaptureWrapper_totalSize_set)
    SAMPLE_RATE_AUDIO_SAMPLE_RATE_8000 = _hilens_internal.AudioCaptureWrapper_SAMPLE_RATE_AUDIO_SAMPLE_RATE_8000
    SAMPLE_RATE_AUDIO_SAMPLE_RATE_12000 = _hilens_internal.AudioCaptureWrapper_SAMPLE_RATE_AUDIO_SAMPLE_RATE_12000
    SAMPLE_RATE_AUDIO_SAMPLE_RATE_11025 = _hilens_internal.AudioCaptureWrapper_SAMPLE_RATE_AUDIO_SAMPLE_RATE_11025
    SAMPLE_RATE_AUDIO_SAMPLE_RATE_16000 = _hilens_internal.AudioCaptureWrapper_SAMPLE_RATE_AUDIO_SAMPLE_RATE_16000
    SAMPLE_RATE_AUDIO_SAMPLE_RATE_22050 = _hilens_internal.AudioCaptureWrapper_SAMPLE_RATE_AUDIO_SAMPLE_RATE_22050
    SAMPLE_RATE_AUDIO_SAMPLE_RATE_24000 = _hilens_internal.AudioCaptureWrapper_SAMPLE_RATE_AUDIO_SAMPLE_RATE_24000
    SAMPLE_RATE_AUDIO_SAMPLE_RATE_32000 = _hilens_internal.AudioCaptureWrapper_SAMPLE_RATE_AUDIO_SAMPLE_RATE_32000
    SAMPLE_RATE_AUDIO_SAMPLE_RATE_44100 = _hilens_internal.AudioCaptureWrapper_SAMPLE_RATE_AUDIO_SAMPLE_RATE_44100
    SAMPLE_RATE_AUDIO_SAMPLE_RATE_48000 = _hilens_internal.AudioCaptureWrapper_SAMPLE_RATE_AUDIO_SAMPLE_RATE_48000
    SAMPLE_RATE_AUDIO_SAMPLE_RATE_64000 = _hilens_internal.AudioCaptureWrapper_SAMPLE_RATE_AUDIO_SAMPLE_RATE_64000
    SAMPLE_RATE_AUDIO_SAMPLE_RATE_96000 = _hilens_internal.AudioCaptureWrapper_SAMPLE_RATE_AUDIO_SAMPLE_RATE_96000
    BIT_WIDTH_AUDIO_BIT_WIDTH_16 = _hilens_internal.AudioCaptureWrapper_BIT_WIDTH_AUDIO_BIT_WIDTH_16
    NUM_SAMPLES_PER_FRAME_MIN_SAMPLES = _hilens_internal.AudioCaptureWrapper_NUM_SAMPLES_PER_FRAME_MIN_SAMPLES
    NUM_SAMPLES_PER_FRAME_MAX_SAMPLES = _hilens_internal.AudioCaptureWrapper_NUM_SAMPLES_PER_FRAME_MAX_SAMPLES
    SOUND_MODE_AUDIO_SOUND_MODE_MONO = _hilens_internal.AudioCaptureWrapper_SOUND_MODE_AUDIO_SOUND_MODE_MONO
    SOUND_MODE_AUDIO_SOUND_MODE_STEREO = _hilens_internal.AudioCaptureWrapper_SOUND_MODE_AUDIO_SOUND_MODE_STEREO
AudioCaptureWrapper_swigregister = _hilens_internal.AudioCaptureWrapper_swigregister
AudioCaptureWrapper_swigregister(AudioCaptureWrapper)

class AudioOutputWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioOutputWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioOutputWrapper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hilens_internal.new_AudioOutputWrapper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hilens_internal.delete_AudioOutputWrapper
    __del__ = lambda self: None

    def Init(self, filePath):
        return _hilens_internal.AudioOutputWrapper_Init(self, filePath)

    def Play(self):
        return _hilens_internal.AudioOutputWrapper_Play(self)

    def PlayAacFile(self, filePath, vol):
        return _hilens_internal.AudioOutputWrapper_PlayAacFile(self, filePath, vol)
AudioOutputWrapper_swigregister = _hilens_internal.AudioOutputWrapper_swigregister
AudioOutputWrapper_swigregister(AudioOutputWrapper)

class BboxWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BboxWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BboxWrapper, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bboxXmin"] = _hilens_internal.BboxWrapper_bboxXmin_set
    __swig_getmethods__["bboxXmin"] = _hilens_internal.BboxWrapper_bboxXmin_get
    if _newclass:
        bboxXmin = _swig_property(_hilens_internal.BboxWrapper_bboxXmin_get, _hilens_internal.BboxWrapper_bboxXmin_set)
    __swig_setmethods__["bboxYmin"] = _hilens_internal.BboxWrapper_bboxYmin_set
    __swig_getmethods__["bboxYmin"] = _hilens_internal.BboxWrapper_bboxYmin_get
    if _newclass:
        bboxYmin = _swig_property(_hilens_internal.BboxWrapper_bboxYmin_get, _hilens_internal.BboxWrapper_bboxYmin_set)
    __swig_setmethods__["bboxXmax"] = _hilens_internal.BboxWrapper_bboxXmax_set
    __swig_getmethods__["bboxXmax"] = _hilens_internal.BboxWrapper_bboxXmax_get
    if _newclass:
        bboxXmax = _swig_property(_hilens_internal.BboxWrapper_bboxXmax_get, _hilens_internal.BboxWrapper_bboxXmax_set)
    __swig_setmethods__["bboxYmax"] = _hilens_internal.BboxWrapper_bboxYmax_set
    __swig_getmethods__["bboxYmax"] = _hilens_internal.BboxWrapper_bboxYmax_get
    if _newclass:
        bboxYmax = _swig_property(_hilens_internal.BboxWrapper_bboxYmax_get, _hilens_internal.BboxWrapper_bboxYmax_set)
    __swig_setmethods__["bboxScore"] = _hilens_internal.BboxWrapper_bboxScore_set
    __swig_getmethods__["bboxScore"] = _hilens_internal.BboxWrapper_bboxScore_get
    if _newclass:
        bboxScore = _swig_property(_hilens_internal.BboxWrapper_bboxScore_get, _hilens_internal.BboxWrapper_bboxScore_set)
    __swig_setmethods__["bboxLabel"] = _hilens_internal.BboxWrapper_bboxLabel_set
    __swig_getmethods__["bboxLabel"] = _hilens_internal.BboxWrapper_bboxLabel_get
    if _newclass:
        bboxLabel = _swig_property(_hilens_internal.BboxWrapper_bboxLabel_get, _hilens_internal.BboxWrapper_bboxLabel_set)

    def __init__(self):
        this = _hilens_internal.new_BboxWrapper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hilens_internal.delete_BboxWrapper
    __del__ = lambda self: None
BboxWrapper_swigregister = _hilens_internal.BboxWrapper_swigregister
BboxWrapper_swigregister(BboxWrapper)

class HardSampleWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HardSampleWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HardSampleWrapper, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _hilens_internal.new_HardSampleWrapper()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hilens_internal.delete_HardSampleWrapper
    __del__ = lambda self: None

    def Init(self, thresholdOne, thresholdTwo, filterType):
        return _hilens_internal.HardSampleWrapper_Init(self, thresholdOne, thresholdTwo, filterType)

    def Filter(self, *args):
        return _hilens_internal.HardSampleWrapper_Filter(self, *args)

    def UploadJpeg(self, uploadUrl, curindex, modelName, cameraName, srcData, cols, rows):
        return _hilens_internal.HardSampleWrapper_UploadJpeg(self, uploadUrl, curindex, modelName, cameraName, srcData, cols, rows)
HardSampleWrapper_swigregister = _hilens_internal.HardSampleWrapper_swigregister
HardSampleWrapper_swigregister(HardSampleWrapper)

class InferDataVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InferDataVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InferDataVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hilens_internal.InferDataVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hilens_internal.InferDataVec___nonzero__(self)

    def __bool__(self):
        return _hilens_internal.InferDataVec___bool__(self)

    def __len__(self):
        return _hilens_internal.InferDataVec___len__(self)

    def __getslice__(self, i, j):
        return _hilens_internal.InferDataVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hilens_internal.InferDataVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hilens_internal.InferDataVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hilens_internal.InferDataVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hilens_internal.InferDataVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hilens_internal.InferDataVec___setitem__(self, *args)

    def pop(self):
        return _hilens_internal.InferDataVec_pop(self)

    def append(self, x):
        return _hilens_internal.InferDataVec_append(self, x)

    def empty(self):
        return _hilens_internal.InferDataVec_empty(self)

    def size(self):
        return _hilens_internal.InferDataVec_size(self)

    def swap(self, v):
        return _hilens_internal.InferDataVec_swap(self, v)

    def begin(self):
        return _hilens_internal.InferDataVec_begin(self)

    def end(self):
        return _hilens_internal.InferDataVec_end(self)

    def rbegin(self):
        return _hilens_internal.InferDataVec_rbegin(self)

    def rend(self):
        return _hilens_internal.InferDataVec_rend(self)

    def clear(self):
        return _hilens_internal.InferDataVec_clear(self)

    def get_allocator(self):
        return _hilens_internal.InferDataVec_get_allocator(self)

    def pop_back(self):
        return _hilens_internal.InferDataVec_pop_back(self)

    def erase(self, *args):
        return _hilens_internal.InferDataVec_erase(self, *args)

    def __init__(self, *args):
        this = _hilens_internal.new_InferDataVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hilens_internal.InferDataVec_push_back(self, x)

    def front(self):
        return _hilens_internal.InferDataVec_front(self)

    def back(self):
        return _hilens_internal.InferDataVec_back(self)

    def assign(self, n, x):
        return _hilens_internal.InferDataVec_assign(self, n, x)

    def resize(self, *args):
        return _hilens_internal.InferDataVec_resize(self, *args)

    def insert(self, *args):
        return _hilens_internal.InferDataVec_insert(self, *args)

    def reserve(self, n):
        return _hilens_internal.InferDataVec_reserve(self, n)

    def capacity(self):
        return _hilens_internal.InferDataVec_capacity(self)
    __swig_destroy__ = _hilens_internal.delete_InferDataVec
    __del__ = lambda self: None
InferDataVec_swigregister = _hilens_internal.InferDataVec_swigregister
InferDataVec_swigregister(InferDataVec)

class EIHeaders(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EIHeaders, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EIHeaders, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hilens_internal.EIHeaders_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hilens_internal.EIHeaders___nonzero__(self)

    def __bool__(self):
        return _hilens_internal.EIHeaders___bool__(self)

    def __len__(self):
        return _hilens_internal.EIHeaders___len__(self)

    def __getslice__(self, i, j):
        return _hilens_internal.EIHeaders___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hilens_internal.EIHeaders___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hilens_internal.EIHeaders___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hilens_internal.EIHeaders___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hilens_internal.EIHeaders___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hilens_internal.EIHeaders___setitem__(self, *args)

    def pop(self):
        return _hilens_internal.EIHeaders_pop(self)

    def append(self, x):
        return _hilens_internal.EIHeaders_append(self, x)

    def empty(self):
        return _hilens_internal.EIHeaders_empty(self)

    def size(self):
        return _hilens_internal.EIHeaders_size(self)

    def swap(self, v):
        return _hilens_internal.EIHeaders_swap(self, v)

    def begin(self):
        return _hilens_internal.EIHeaders_begin(self)

    def end(self):
        return _hilens_internal.EIHeaders_end(self)

    def rbegin(self):
        return _hilens_internal.EIHeaders_rbegin(self)

    def rend(self):
        return _hilens_internal.EIHeaders_rend(self)

    def clear(self):
        return _hilens_internal.EIHeaders_clear(self)

    def get_allocator(self):
        return _hilens_internal.EIHeaders_get_allocator(self)

    def pop_back(self):
        return _hilens_internal.EIHeaders_pop_back(self)

    def erase(self, *args):
        return _hilens_internal.EIHeaders_erase(self, *args)

    def __init__(self, *args):
        this = _hilens_internal.new_EIHeaders(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hilens_internal.EIHeaders_push_back(self, x)

    def front(self):
        return _hilens_internal.EIHeaders_front(self)

    def back(self):
        return _hilens_internal.EIHeaders_back(self)

    def assign(self, n, x):
        return _hilens_internal.EIHeaders_assign(self, n, x)

    def resize(self, *args):
        return _hilens_internal.EIHeaders_resize(self, *args)

    def insert(self, *args):
        return _hilens_internal.EIHeaders_insert(self, *args)

    def reserve(self, n):
        return _hilens_internal.EIHeaders_reserve(self, n)

    def capacity(self):
        return _hilens_internal.EIHeaders_capacity(self)
    __swig_destroy__ = _hilens_internal.delete_EIHeaders
    __del__ = lambda self: None
EIHeaders_swigregister = _hilens_internal.EIHeaders_swigregister
EIHeaders_swigregister(EIHeaders)

class HardSampleBboxes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HardSampleBboxes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HardSampleBboxes, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hilens_internal.HardSampleBboxes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hilens_internal.HardSampleBboxes___nonzero__(self)

    def __bool__(self):
        return _hilens_internal.HardSampleBboxes___bool__(self)

    def __len__(self):
        return _hilens_internal.HardSampleBboxes___len__(self)

    def __getslice__(self, i, j):
        return _hilens_internal.HardSampleBboxes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hilens_internal.HardSampleBboxes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hilens_internal.HardSampleBboxes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hilens_internal.HardSampleBboxes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hilens_internal.HardSampleBboxes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hilens_internal.HardSampleBboxes___setitem__(self, *args)

    def pop(self):
        return _hilens_internal.HardSampleBboxes_pop(self)

    def append(self, x):
        return _hilens_internal.HardSampleBboxes_append(self, x)

    def empty(self):
        return _hilens_internal.HardSampleBboxes_empty(self)

    def size(self):
        return _hilens_internal.HardSampleBboxes_size(self)

    def swap(self, v):
        return _hilens_internal.HardSampleBboxes_swap(self, v)

    def begin(self):
        return _hilens_internal.HardSampleBboxes_begin(self)

    def end(self):
        return _hilens_internal.HardSampleBboxes_end(self)

    def rbegin(self):
        return _hilens_internal.HardSampleBboxes_rbegin(self)

    def rend(self):
        return _hilens_internal.HardSampleBboxes_rend(self)

    def clear(self):
        return _hilens_internal.HardSampleBboxes_clear(self)

    def get_allocator(self):
        return _hilens_internal.HardSampleBboxes_get_allocator(self)

    def pop_back(self):
        return _hilens_internal.HardSampleBboxes_pop_back(self)

    def erase(self, *args):
        return _hilens_internal.HardSampleBboxes_erase(self, *args)

    def __init__(self, *args):
        this = _hilens_internal.new_HardSampleBboxes(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hilens_internal.HardSampleBboxes_push_back(self, x)

    def front(self):
        return _hilens_internal.HardSampleBboxes_front(self)

    def back(self):
        return _hilens_internal.HardSampleBboxes_back(self)

    def assign(self, n, x):
        return _hilens_internal.HardSampleBboxes_assign(self, n, x)

    def resize(self, *args):
        return _hilens_internal.HardSampleBboxes_resize(self, *args)

    def insert(self, *args):
        return _hilens_internal.HardSampleBboxes_insert(self, *args)

    def reserve(self, n):
        return _hilens_internal.HardSampleBboxes_reserve(self, n)

    def capacity(self):
        return _hilens_internal.HardSampleBboxes_capacity(self)
    __swig_destroy__ = _hilens_internal.delete_HardSampleBboxes
    __del__ = lambda self: None
HardSampleBboxes_swigregister = _hilens_internal.HardSampleBboxes_swigregister
HardSampleBboxes_swigregister(HardSampleBboxes)

# This file is compatible with both classic and new-style classes.


